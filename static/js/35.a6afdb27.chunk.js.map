{"version":3,"file":"static/js/35.a6afdb27.chunk.js","mappings":"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","sources":["components/Contact/Contact.styled.js","components/Contact/Contact.js","redux/contacts/selectors.js","components/ContactsList/ContactsList.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/FilterContacts/FilterContacts.styled.js","components/FilterContacts/FilterContacts.js","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  :not(:last-of-type) {\n    margin-bottom: 8px;\n  }\n  display: flex;\n  align-items: baseline;\n`;\n\nexport const ContactInfo = styled.p`\n  display: inline-block;\n  margin: 0 10px 0 0;\n`;\n\nexport const ContBtn = styled.button`\n  font-size: 12px;\n  background-color: transparent;\n  border: 1px solid grey;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: 0.2s;\n\n  :hover,\n  :focus {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`;\n","import { ContactItem, ContactInfo, ContBtn } from './Contact.styled';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/options';\nimport { correctContact } from 'redux/contacts/contactsSlice';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const handleUpdate = () => {\n    dispatch(correctContact({ name, number, id }));\n  };\n\n  return (\n    <ContactItem>\n      <ContactInfo>\n        {name}: {number}\n      </ContactInfo>\n      <div style={{ display: 'flex', gap: '10px' }}>\n        <ContBtn onClick={() => dispatch(deleteContact(id))}>Delete</ContBtn>\n        <ContBtn onClick={handleUpdate}>Correct</ContBtn>\n      </div>\n    </ContactItem>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.exact({\n    name: PropTypes.string,\n    number: PropTypes.string,\n    id: PropTypes.string,\n  }).isRequired,\n};\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectCorrectOn = state => state.contacts.correctOn;\n\nexport const selectFilter = state => state.filter.status;\n","import { Contact } from 'components/Contact';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const nolmalizeFilter = filter.toLowerCase();\n  const visiableContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(nolmalizeFilter)\n  );\n\n  return (\n    <ul>\n      {visiableContacts.map(contact => (\n        <Contact key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from '@emotion/styled';\n\nexport const FormContacts = styled.form`\n  display: inline-block;\n  padding: 8px;\n  min-width: 300px;\n\n  border: 1px solid black;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 4px;\n`;\n\nexport const InputWrapper = styled.div`\n  margin-bottom: 12px;\n`;\n\nexport const Submit = styled.button`\n  font-size: 12px;\n  background-color: transparent;\n  border: 1px solid grey;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: 0.2s;\n\n  :hover,\n  :focus {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport {\n  FormContacts,\n  Label,\n  InputWrapper,\n  Submit,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, updateContact } from 'redux/contacts/options';\nimport { selectContacts, selectCorrectOn } from 'redux/contacts/selectors';\nimport { useEffect, useState } from 'react';\n\nexport const ContactForm = () => {\n  const correctOn = useSelector(selectCorrectOn);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('+');\n\n  useEffect(() => {\n    if (correctOn.on) {\n      setName(correctOn.name);\n      setNumber(correctOn.number);\n    }\n  }, [correctOn]);\n\n  const handlerChangeName = e => {\n    setName(e.target.value);\n  };\n\n  const handlerChangeNumber = e => {\n    setNumber(e.target.value);\n  };\n\n  const handlerContact = e => {\n    e.preventDefault();\n\n    const name = e.currentTarget.elements.name.value;\n    const number = e.currentTarget.elements.number.value;\n\n    if (correctOn.on) {\n      dispatch(\n        updateContact({\n          name,\n          number,\n          id: correctOn.id,\n        })\n      );\n\n      setName('');\n      setNumber('+');\n\n      return;\n    }\n\n    // Check name for repetition\n    const normalizeName = name.toLowerCase();\n    const NameAlreadyInContacts = contacts.find(\n      ({ name: nameOfContact }) => nameOfContact.toLowerCase() === normalizeName\n    );\n    if (NameAlreadyInContacts) {\n      return alert(`${name} is already in contacts.`);\n    }\n\n    // Check number for repetition\n    let thisNameOfContact = null;\n    const NumberAlreadyInContacts = contacts.find(\n      ({ number: numberOfContact, name: nameOfContact }) => {\n        thisNameOfContact = numberOfContact === number && nameOfContact;\n        return numberOfContact === number;\n      }\n    );\n    if (NumberAlreadyInContacts) {\n      return alert(`${number}(${thisNameOfContact}) is already in contacts.`);\n    }\n\n    dispatch(addContact({ name, number }));\n\n    setName('');\n    setNumber('+');\n  };\n\n  const idForNameInput = nanoid();\n  const idForNumberInput = nanoid();\n\n  return (\n    <FormContacts onSubmit={handlerContact}>\n      <InputWrapper>\n        <Label htmlFor={idForNameInput}>Name</Label>\n        <input\n          id={idForNameInput}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handlerChangeName}\n        />\n      </InputWrapper>\n\n      <InputWrapper>\n        <Label htmlFor={idForNumberInput}>Number</Label>\n        <input\n          id={idForNumberInput}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handlerChangeNumber}\n        />\n      </InputWrapper>\n\n      <Submit type=\"submit\">{correctOn.on ? 'Update' : 'Add contact'}</Submit>\n    </FormContacts>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div``;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 4px;\n\n  font-size: 18px;\n`;\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { changeFilter } from 'redux/contacts/filterSlice';\nimport { FilterContainer, Label } from './FilterContacts.styled';\n\nexport const FilterContacts = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeInput = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n\n  const idForFilterInput = nanoid();\n\n  return (\n    <FilterContainer>\n      <Label htmlFor={idForFilterInput}>Find contacts by name</Label>\n      <input\n        id={idForFilterInput}\n        type=\"text\"\n        value={filter}\n        onChange={changeInput}\n      />\n    </FilterContainer>\n  );\n};\n","import { ContactsList } from 'components/ContactsList';\nimport { ContactForm } from 'components/ContactForm';\nimport { FilterContacts } from 'components/FilterContacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/options';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <FilterContacts />\n      <ContactsList />\n\n      {isLoading && <b>Wait please...</b>}\n      {error && (\n        <b style={{ color: 'red' }}>\n          Oops, something went wrong! Please reload the page\n        </b>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactItem","styled","ContactInfo","ContBtn","Contact","contact","id","name","number","dispatch","useDispatch","style","display","gap","onClick","deleteContact","correctContact","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectCorrectOn","correctOn","selectFilter","filter","status","ContactsList","useSelector","nolmalizeFilter","toLowerCase","visiableContacts","includes","map","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","FormContacts","Label","InputWrapper","Submit","ContactForm","useState","setName","setNumber","useEffect","on","idForNameInput","idForNumberInput","onSubmit","e","preventDefault","currentTarget","elements","value","updateContact","normalizeName","find","alert","thisNameOfContact","numberOfContact","nameOfContact","addContact","htmlFor","type","onChange","target","FilterContainer","FilterContacts","idForFilterInput","changeFilter","fetchContacts","padding","color"],"sourceRoot":""}